# -*- coding: utf-8 -*-
"""tests/test_call_external_agent.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dWnkkxUDM3Fsruma9VaL-g_iSRd8HWoB
"""

import asyncio
import logging
from typing import Dict, Any

from src.reverse import agents
import pytest
from fastapi import HTTPException
from src.reverse.main_enterprise import app_state, call_external_agent, get_settings


class FakeRedisClient:
    def __init__(self):
        self.storage: Dict[str, str] = {}
        self.get_calls = 0
        self.setex_calls = 0

    async def get(self, key: str) -> str | None:
        self.get_calls += 1
        return self.storage.get(key)

    async def setex(self, key: str, ttl: int, value: str):
        self.setex_calls += 1
        self.storage[key] = value


def test_call_external_agent_uses_cache_after_first_invocation(monkeypatch):
    asyncio.run(_test_call_external_agent_uses_cache_after_first_invocation(monkeypatch))


async def _test_call_external_agent_uses_cache_after_first_invocation(monkeypatch):
    fake_redis = FakeRedisClient()
    original_client = app_state.redis_client
    app_state.redis_client = fake_redis

    call_count = 0

    def fake_run_agent(agent_name, system_message, user_prompt, model=None):
        nonlocal call_count
        call_count += 1
        assert model == get_settings().default_model
        assert agent_name == "Critic"
        assert "Critic" in system_message
        assert "Evaluate this prompt" in user_prompt
        return agent_name, f"Analysis for: {user_prompt[:50]}"

    monkeypatch.setattr(agents, "run_agent", fake_run_agent)

    try:
        first_response = await call_external_agent("Critic", "Evaluate this prompt")
        second_response = await call_external_agent("Critic", "Evaluate this prompt")

        assert first_response == second_response
        assert fake_redis.setex_calls == 1
        assert fake_redis.get_calls >= 2
        assert call_count == 1
    finally:
        app_state.redis_client = original_client


def test_call_external_agent_does_not_cache_on_failure(monkeypatch):
    asyncio.run(_test_call_external_agent_does_not_cache_on_failure(monkeypatch))


async def _test_call_external_agent_does_not_cache_on_failure(monkeypatch):
    fake_redis = FakeRedisClient()
    original_client = app_state.redis_client
    app_state.redis_client = fake_redis

    def failing_run_agent(*_args, **_kwargs):
        raise agents.AgentExecutionError("Agent 'Critic' failed to respond.")

    monkeypatch.setattr(agents, "run_agent", failing_run_agent)

    try:
        with pytest.raises(HTTPException) as exc_info:
            await call_external_agent("Critic", "Evaluate this prompt")

        assert exc_info.value.status_code == 502
        assert fake_redis.setex_calls == 0
        assert fake_redis.storage == {}
    finally:
        app_state.redis_client = original_client


def test_call_external_agent_logs_cache_errors_but_returns_result(monkeypatch, caplog):
    asyncio.run(
        _test_call_external_agent_logs_cache_errors_but_returns_result(
            monkeypatch,
            caplog,
        )
    )


async def _test_call_external_agent_logs_cache_errors_but_returns_result(monkeypatch, caplog):
    class FailingRedisClient(FakeRedisClient):
        async def setex(self, key: str, ttl: int, value: str):  # type: ignore[override]
            self.setex_calls += 1
            raise RuntimeError("Simulated cache failure")

    fake_redis = FailingRedisClient()
    original_client = app_state.redis_client
    app_state.redis_client = fake_redis

    call_count = 0

    def fake_run_agent(agent_name, system_message, user_prompt, model=None):
        nonlocal call_count
        call_count += 1
        return agent_name, "Fresh response"

    monkeypatch.setattr(agents, "run_agent", fake_run_agent)

    try:
        caplog.clear()
        with caplog.at_level(logging.WARNING):
            response = await call_external_agent("Critic", "Evaluate this prompt")

        assert response["response"] == "Fresh response"
        assert call_count == 1
        assert fake_redis.setex_calls == 3
        assert fake_redis.storage == {}
        assert any(
            "Exceeded retry attempts caching agent result" in record.getMessage()
            for record in caplog.records
        )
    finally:
        app_state.redis_client = original_client


def test_call_external_agent_normalizes_non_string_prompts(monkeypatch):
    asyncio.run(_test_call_external_agent_normalizes_non_string_prompts(monkeypatch))


async def _test_call_external_agent_normalizes_non_string_prompts(monkeypatch):
    fake_redis = FakeRedisClient()
    original_client = app_state.redis_client
    app_state.redis_client = fake_redis

    received_prompts = []

    def fake_run_agent(agent_name, system_message, user_prompt, model=None):
        received_prompts.append(user_prompt)
        return agent_name, "Handled"

    monkeypatch.setattr(agents, "run_agent", fake_run_agent)

    try:
        dict_prompt = {"topic": "AI", "depth": 2}
        none_prompt = None

        response_dict = await call_external_agent("Critic", dict_prompt)
        response_none = await call_external_agent("Critic", none_prompt)

        assert response_dict["response"] == "Handled"
        assert response_none["response"] == "Handled"

        assert all(isinstance(p, str) for p in received_prompts)
        assert any("topic" in p for p in received_prompts)
        assert "" in received_prompts
    finally:
        app_state.redis_client = original_client