# -*- coding: utf-8 -*-
"""src/reverse/compass_cli.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GrsmZpkd_p5NmWRnbO0rQuHp0FwYKoZM
"""

import sqlite3
import argparse
import datetime
import os
import sys
import ollama

# --- Configuration ---
COMPASS_DB = "compass.db"
PROMPT_DB = "prompt_bank.db"
TEMPLATE_DIR = "src/reverse/templates"
DEFAULT_MODEL = "phi3:mini"

# --- AI Helper Function ---
def call_ai(prompt_text, model=DEFAULT_MODEL):
    """Sends a prompt to the local Ollama AI and returns the response."""
    try:
        response = ollama.chat(
            model=model,
            messages=[{'role': 'user', 'content': prompt_text}]
        )
        return response['message']['content']
    except Exception as e:
        print(f"\n❌ AI Call Failed: {e}", file=sys.stderr)
        print(f"   Is Ollama running and have you pulled '{model}'?", file=sys.stderr)
        return None

# --- Database & Memory Functions ---
def setup_databases():
    # Compass DB
    with sqlite3.connect(COMPASS_DB) as conn:
        conn.execute('CREATE TABLE IF NOT EXISTS goals (id INTEGER PRIMARY KEY, name TEXT NOT NULL, progress INTEGER DEFAULT 0, status TEXT DEFAULT "active")')
        conn.execute('CREATE TABLE IF NOT EXISTS context_log (id INTEGER PRIMARY KEY, timestamp TEXT NOT NULL, entry_type TEXT NOT NULL, content TEXT NOT NULL, reason TEXT)')
    # Prompt Bank DB
    with sqlite3.connect(PROMPT_DB) as conn:
        conn.execute('CREATE TABLE IF NOT EXISTS prompts (id INTEGER PRIMARY KEY, timestamp TEXT NOT NULL, raw_prompt TEXT NOT NULL, refined_prompt TEXT NOT NULL, domain TEXT, success_score INTEGER)')

def get_active_goal():
    with sqlite3.connect(COMPASS_DB) as conn:
        return conn.execute("SELECT id, name, progress FROM goals WHERE status = 'active' LIMIT 1").fetchone()

def log_context(entry_type, content, reason=None):
    ts = datetime.datetime.now(datetime.timezone.utc).isoformat()
    with sqlite3.connect(COMPASS_DB) as conn:
        conn.execute("INSERT INTO context_log (timestamp, entry_type, content, reason) VALUES (?, ?, ?, ?)", (ts, entry_type, content, reason))

def save_prompt_to_memory(raw_prompt, refined_prompt, domain=None):
    ts = datetime.datetime.now(datetime.timezone.utc).isoformat()
    with sqlite3.connect(PROMPT_DB) as conn:
        conn.execute("INSERT INTO prompts (timestamp, raw_prompt, refined_prompt, domain) VALUES (?, ?, ?, ?)", (ts, raw_prompt, refined_prompt, domain))
    print("💾 Prompt pair saved to memory bank.")

# --- Core Compass Commands ---
def set_goal(name, reason=None):
    with sqlite3.connect(COMPASS_DB) as conn:
        conn.execute("UPDATE goals SET status = 'archived' WHERE status = 'active'")
        conn.execute("INSERT INTO goals (name) VALUES (?)", (name,))
    log_context('goal_set', f"New objective defined: {name}", reason)
    print(f"🧭 New goal set: '{name}'")

# ... (update_progress, add_proof, show_dashboard, show_why_log functions remain the same as v1.2) ...
def update_progress(progress_value, reason=None):
    active_goal = get_active_goal()
    if not active_goal: print("❌ No active goal."); return
    goal_id = active_goal[0]
    with sqlite3.connect(COMPASS_DB) as conn:
        conn.execute("UPDATE goals SET progress = ? WHERE id = ?", (progress_value, goal_id))
    log_context('progress', f"Progress updated to {progress_value}%", reason)
    print(f"📈 Progress updated to {progress_value}%.")

def add_proof(proof_text, reason=None):
    log_context('proof', proof_text, reason)
    print(f"✅ Proof added: '{proof_text}'")

def show_dashboard():
    goal = get_active_goal()
    print("┌──────────────────────────────────────────┐")
    print("│ 🧭 C O M P A S S   D A S H B O A R D      │")
    print("└──────────────────────────────────────────┘")
    if not goal: print("\n  No active goal.\n"); return
    _, name, progress = goal
    bar = '█' * int(20 * progress / 100) + '─' * (20 - int(20 * progress / 100))
    print(f"\n🎯 CURRENT GOAL: {name}\n   PROGRESS: [{bar}] {progress}%\n")
    with sqlite3.connect(COMPASS_DB) as conn:
        logs = conn.execute("SELECT entry_type, content FROM context_log ORDER BY id DESC LIMIT 3").fetchall()
    if logs:
        print("   Recent Activity:")
        for log_type, content in logs:
            icon = {'proof': '✅', 'progress': '📈', 'goal_set': '🧭'}.get(log_type, '•')
            print(f"     {icon} [{log_type.upper()}] {content}")
    print("\n--------------------------------------------")

def show_why_log():
    print("--- 🧠 Decision & Context Log ---")
    with sqlite3.connect(COMPASS_DB) as conn:
        logs = conn.execute("SELECT content, reason FROM context_log WHERE reason IS NOT NULL ORDER BY id DESC").fetchall()
    if not logs: print("No context with reasons has been logged yet."); return
    for content, reason in logs:
        print(f"ACTION: {content}\n  WHY?  : {reason}\n")
    print("---------------------------------")

# --- Integrated Prompt Engine Commands ---
def refine_current_goal():
    """Takes the current goal and refines it using the one-shot method."""
    goal = get_active_goal()
    if not goal:
        print("❌ No active goal to refine. Set one first with 'set-goal'.")
        return

    raw_goal_text = goal[1]
    print(f"--- ⚙️ Refining current goal: '{raw_goal_text}' ---")

    one_shot_prompt = f"""
    You are a world-class prompt engineer. Your task is to transform a raw user idea into a detailed, production-ready "golden prompt".
    Follow these two steps internally:
    1.  **Structure Pass:** Analyze the user's raw input and convert it into a well-structured prompt.
    2.  **Enhancement Pass:** Critically enhance the structured prompt with context, constraints, and examples.
    After completing both internal steps, output ONLY the final, enhanced "golden prompt".
    RAW USER INPUT: "{raw_goal_text}"
    """

    refined_prompt = call_ai(one_shot_prompt)
    if refined_prompt:
        print("\n--- ✨ Refined Goal Prompt ✨ ---")
        print(refined_prompt)
        print("\n---------------------------\n")
        save_prompt_to_memory(raw_goal_text, refined_prompt, "goal-refinement")

def generate_from_template(template_name, task_description):
    """Generates a prompt from a template file."""
    template_file = os.path.join(TEMPLATE_DIR, f"{template_name}_template.md")
    if not os.path.exists(template_file):
        print(f"❌ Error: Template '{template_file}' not found."); return

    with open(template_file, 'r') as f:
        template_content = f.read()

    final_prompt = template_content.replace("{{TASK}}", task_description)
    print("--- 📋 Generated Prompt from Template ---")
    print(final_prompt)
    print("---------------------------------------")
    save_prompt_to_memory(task_description, final_prompt, template_name)

if __name__ == "__main__":
    setup_databases()
    parser = argparse.ArgumentParser(description="Unified CLI for goal tracking and prompt engineering.")
    subparsers = parser.add_subparsers(dest="command", required=True)

    # Compass commands
    p_set = subparsers.add_parser("set-goal", help="Set a new primary goal.")
    p_set.add_argument("name", type=str)
    p_set.add_argument("-r", "--reason", type=str)

    p_update = subparsers.add_parser("update-progress", help="Update goal progress.")
    p_update.add_argument("progress", type=int)
    p_update.add_argument("-r", "--reason", type=str)

    p_add = subparsers.add_parser("add-proof", help="Add a proof of work.")
    p_add.add_argument("proof", type=str)
    p_add.add_argument("-r", "--reason", type=str)

    subparsers.add_parser("show", help="Display the dashboard.")
    subparsers.add_parser("why", help="Display the decision log.")

    # Integrated Prompt Engine commands
    subparsers.add_parser("refine-goal", help="Refine the current active goal using AI.")
    p_from_template = subparsers.add_parser("from-template", help="Generate a prompt from a template.")
    p_from_template.add_argument("template_name", type=str, help="Name of the template (e.g., 'coding').")
    p_from_template.add_argument("task_description", type=str, help="Specific task description.")

    args = parser.parse_args()

    # Command Router
    if args.command == "set-goal": set_goal(args.name, args.reason)
    elif args.command == "update-progress": update_progress(args.progress, args.reason)
    elif args.command == "add-proof": add_proof(args.proof, args.reason)
    elif args.command == "show": show_dashboard()
    elif args.command == "why": show_why_log()
    elif args.command == "refine-goal": refine_current_goal()
    elif args.command == "from-template": generate_from_template(args.template_name, args.task_description)