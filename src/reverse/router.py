# -*- coding: utf-8 -*-
"""src/reverse/router.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mSSMUHoFoHYhh7YNLHvRKWQsC2N7NUDO
"""

import ollama
import argparse
import sys
import os

MODELS = { "fast": "phi3:mini", "quality": "llama3", "code": "codegemma" }

def route_task(task_description):
    # ... (routing logic is unchanged)
    task_lower = task_description.lower()
    if any(keyword in task_lower for keyword in ["debug", "fix", "error", "explain"]):
        return MODELS["fast"]
    elif any(keyword in task_lower for keyword in ["design", "create", "write", "plan", "spec"]):
        return MODELS["quality"]
    elif any(keyword in task_lower for keyword in ["code", "python", "javascript", "sql", "function"]):
        return MODELS["code"]
    else:
        return MODELS["quality"]

def execute_task(task, model):
    # ... (execution logic is unchanged)
    print(f"--- ü§ñ Routing task to model: '{model}' ---")
    try:
        stream = ollama.chat(model=model, messages=[{'role': 'user', 'content': task}], stream=True)
        print("‚úÖ AI Response:")
        for chunk in stream:
            print(chunk['message']['content'], end='', flush=True)
        print("\n")
    except Exception as e:
        print(f"\n‚ùå AI Call Failed: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="A smart router to dispatch tasks to the best AI model.")
    # Add a new, dedicated argument for file input
    parser.add_argument("-f", "--file", type=str, help="Path to a file containing the prompt.")
    # Keep the positional argument for simple, one-line tasks
    parser.add_argument("task", type=str, nargs='?', default=None, help="The task description (for simple tasks).")
    args = parser.parse_args()

    task_content = ""
    if args.file:
        try:
            with open(args.file, 'r') as f:
                task_content = f.read()
            print(f"üß† Loading prompt from file: {args.file}")
        except FileNotFoundError:
            print(f"‚ùå Error: File not found at '{args.file}'", file=sys.stderr)
            sys.exit(1)
    elif args.task:
        task_content = args.task
    else:
        print("‚ùå Error: No task provided. Use '--file <filename>' or provide a task in quotes.", file=sys.stderr)
        parser.print_help()
        sys.exit(1)

    selected_model = route_task(task_content)
    execute_task(task_content, selected_model)