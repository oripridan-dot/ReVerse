# -*- coding: utf-8 -*-
"""src/migrations/0001_update_job_metadata.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ELs5i_KPIRW-PBxeX5FpSLqNGXir_Cry
"""

"""Fix legacy ``jobs.metadata`` values.

This migration normalizes legacy rows where ``metadata`` may be ``NULL`` due
 to the previous ORM default using a shared dictionary. Running the migration
 ensures every row stores an isolated JSON object.
"""

from __future__ import annotations

from sqlalchemy import text

try:
    from alembic import op
except ModuleNotFoundError:  # pragma: no cover - optional dependency
    op = None  # type: ignore


def _empty_json_literal(connection) -> str:
    if connection.dialect.name == "postgresql":
        return "'{}'::jsonb"
    return "'{}'"


def upgrade(connection=None):
    """Populate empty metadata dictionaries for legacy rows."""
    if op is not None:
        connection = op.get_bind()
    elif connection is None:
        raise RuntimeError("An SQLAlchemy connection or Alembic op context is required")

    empty_json = _empty_json_literal(connection)
    connection.execute(
        text(
            f"""
            UPDATE jobs
               SET metadata = {empty_json}
             WHERE metadata IS NULL
            """
        )
    )


def downgrade(connection=None):
    """Best-effort downgrade restores ``NULL`` metadata values."""
    if op is not None:
        connection = op.get_bind()
    elif connection is None:
        raise RuntimeError("An SQLAlchemy connection or Alembic op context is required")

    empty_json = _empty_json_literal(connection)
    connection.execute(
        text(
            f"""
            UPDATE jobs
               SET metadata = NULL
             WHERE metadata = {empty_json}
            """
        )
    )