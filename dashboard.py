# -*- coding: utf-8 -*-
"""src/reverse/dashboard.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZfC3Cxi9W2etvbeut0oX9RvAWjjC8E2M
"""

# dashboard.py (Final Version)
import sqlite3
import json
import os

COMPASS_DB = "compass.db"
PROMPT_DB = "prompt_bank.db"
SHIP_LOG = "ship_log.jsonl"

def get_system_summary():
    """Builds and returns the full dashboard text as a string."""

    # Helper functions to get data
    def get_current_goal():
        if not os.path.exists(COMPASS_DB): return "No Compass DB found."
        with sqlite3.connect(COMPASS_DB) as conn:
            goal = conn.execute("SELECT name, progress FROM goals WHERE status = 'active' LIMIT 1").fetchone()
        if goal:
            name, progress = goal
            bar = '‚ñà' * int(10 * progress / 100) + '‚îÄ' * (10 - int(10 * progress / 100))
            return f"{name} [{bar}] {progress}%"
        return "No active goal set."

    def get_prompt_bank_stats():
        if not os.path.exists(PROMPT_DB): return 0, "N/A"
        with sqlite3.connect(PROMPT_DB) as conn:
            total_prompts = conn.execute("SELECT COUNT(*) FROM prompts").fetchone()[0]
            top_domain = conn.execute("SELECT domain, COUNT(domain) as c FROM prompts WHERE domain IS NOT NULL GROUP BY domain ORDER BY c DESC LIMIT 1").fetchone()
        top_domain_name = top_domain[0] if top_domain else "N/A"
        return total_prompts, top_domain_name

    def get_last_commitment():
        if not os.path.exists(SHIP_LOG): return "No ship log found."
        last_line = ""
        with open(SHIP_LOG, 'r') as f:
            for line in f: last_line = line
        if last_line:
            return json.loads(last_line).get('commitment', 'Error parsing log.')
        return "No commitments logged."

    # Build the dashboard string
    total, top_domain = get_prompt_bank_stats()

    summary = "üåÄ S Y S T E M   F L Y W H E E L   D A S H B O A R D üåÄ\n"
    summary += "="*50 + "\n\n"
    summary += f"üéØ CURRENT GOAL\n   {get_current_goal()}\n\n"
    summary += f"üß† PROMPT MEMORY BANK\n   Total Prompts Stored: {total}\n   Most Frequent Domain: {top_domain}\n\n"
    summary += f"‚ö°Ô∏è LAST COMMITMENT\n   '{get_last_commitment()}'\n\n"
    summary += "="*50

    return summary

if __name__ == "__main__":
    # This allows the script to still be run directly: `python dashboard.py`
    print(get_system_summary())